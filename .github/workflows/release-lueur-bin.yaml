name: Release Lueur Binaries

permissions:
  contents: write

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
    paths: 
      - 'lueur/**'
      - '.github/workflows/release-lueur-bin.yaml'

jobs:
  release-assets:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: lueur
            asset_name: lueur-cli
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            artifact_name: lueur
            asset_name: lueur-cli
          - target: x86_64-unknown-linux-musl
            os: ubuntu-24.04
            artifact_name: lueur
            asset_name: lueur-cli
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
            artifact_name: lueur
            asset_name: lueur-cli
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: lueur.exe
            asset_name: lueur-cli

    name: Build workspace on ${{ matrix.os }} / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: |
         rustup toolchain install nightly --component rust-src
         rustup update nightly
         rustup override set nightly

      - uses: Swatinem/rust-cache@v2
        with:
         key: ${{ matrix.target }}
         workspaces: |
           lueur
      
      - name: Install gRPC build dependencies (Linux)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt install -y protobuf-compiler libssl-dev

      - name: Install gRPC build dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc --pre -y

      - name: Install gRPC build dependencies (MacOSX)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        working-directory: ./lueur/lueur-cli

      - name: Upload binaries to release
        if: matrix.os != 'windows-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          promote: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lueur/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}-${{ github.ref_name }}-${{ matrix.target }}
          tag: ${{ github.ref }}

      - name: Upload binaries to release
        if: matrix.os == 'windows-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          promote: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lueur/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}-${{ github.ref_name }}-${{ matrix.target }}.exe
          tag: ${{ github.ref }}

      - name: Publish lueur CLI
        if: matrix.os == 'ubuntu-24.04' && matrix.target == 'x86_64-unknown-linux-gnu'
        working-directory: ./lueur/lueur-cli
        run: |
          cargo publish --allow-dirty --no-verify --package lueur-cli --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release-ebpf-assets:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            artifact_name: lueur

    name: Build workspace on ${{ matrix.os }} / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: |
         rustup toolchain install nightly --component rust-src
         rustup update nightly
         rustup override set nightly

      - uses: Swatinem/rust-cache@v2
        with:
         key: ${{ matrix.target }}
         workspaces: |
           lueur
      
      - name: Install gRPC build dependencies (Linux)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt install -y protobuf-compiler libssl-dev

      - name: Build
        if: matrix.os == 'ubuntu-24.04'
        run: |
          cargo install bpf-linker --git https://github.com/aya-rs/bpf-linker.git
          cargo build --release --features stealth --target ${{ matrix.target }}
          cargo build \
            --release \
            -p lueur-ebpf-programs \
            --target=bpfel-unknown-none \
            -Z build-std=core
        working-directory: ./lueur/lueur-cli

      - name: Upload lueur CLI with ebpf support to release
        uses: svenstaro/upload-release-action@v2
        with:
          promote: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lueur/target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: lueur-cli-ebpf-${{ github.ref_name }}-${{ matrix.target }}
          tag: ${{ github.ref }}

      - name: Upload ebpf programs to release
        if: matrix.os == 'ubuntu-24.04'
        uses: svenstaro/upload-release-action@v2
        with:
          promote: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lueur/target/bpfel-unknown-none/release//lueur-ebpf
          asset_name: lueur-ebpf-programs-${{ github.ref_name }}-${{ matrix.target }}
          tag: ${{ github.ref }}

      - name: Publish lueur ebpf-programs
        if: matrix.os == 'ubuntu-24.04'
        working-directory: ./lueur/lueur-ebpf-programs
        run: |
          cargo publish --allow-dirty --no-verify --package lueur-ebpf-programs --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release-docker-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/rebound-how/lueur
          tags: |
            type=semver,pattern={{version}}

      - name: Build and push lueur CLI
        uses: docker/build-push-action@v6
        with:
          context: "."
          file: "./deploy/docker/lueur/Dockerfile"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          platforms: linux/amd64,linux/arm64

  release-docker-ebpf-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/rebound-how/lueur-stealth
          tags: |
            type=semver,pattern={{version}}

      - name: Build and push lueur CLI with ebpf support
        uses: docker/build-push-action@v6
        with:
          context: "."
          file: "./deploy/docker/lueur/Dockerfile_ebpf"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          platforms: linux/amd64,linux/arm64
