# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import plugin_pb2 as plugin__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in plugin_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PluginServiceStub(object):
    """Main service that plugin providers implement.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/plugin.PluginService/HealthCheck',
                request_serializer=plugin__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=plugin__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.GetPluginInfo = channel.unary_unary(
                '/plugin.PluginService/GetPluginInfo',
                request_serializer=plugin__pb2.GetPluginInfoRequest.SerializeToString,
                response_deserializer=plugin__pb2.GetPluginInfoResponse.FromString,
                _registered_method=True)
        self.GetPluginCapabilities = channel.unary_unary(
                '/plugin.PluginService/GetPluginCapabilities',
                request_serializer=plugin__pb2.GetPluginCapabilitiesRequest.SerializeToString,
                response_deserializer=plugin__pb2.GetPluginCapabilitiesResponse.FromString,
                _registered_method=True)
        self.ProcessHttpRequest = channel.unary_unary(
                '/plugin.PluginService/ProcessHttpRequest',
                request_serializer=plugin__pb2.ProcessHttpRequestRequest.SerializeToString,
                response_deserializer=plugin__pb2.ProcessHttpRequestResponse.FromString,
                _registered_method=True)
        self.ProcessHttpResponse = channel.unary_unary(
                '/plugin.PluginService/ProcessHttpResponse',
                request_serializer=plugin__pb2.ProcessHttpResponseRequest.SerializeToString,
                response_deserializer=plugin__pb2.ProcessHttpResponseResponse.FromString,
                _registered_method=True)
        self.ProcessTunnelData = channel.unary_unary(
                '/plugin.PluginService/ProcessTunnelData',
                request_serializer=plugin__pb2.ProcessTunnelDataRequest.SerializeToString,
                response_deserializer=plugin__pb2.ProcessTunnelDataResponse.FromString,
                _registered_method=True)


class PluginServiceServicer(object):
    """Main service that plugin providers implement.
    """

    def HealthCheck(self, request, context):
        """Home made health check endpoint to verify the plugin is running.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPluginInfo(self, request, context):
        """Retrieves basic plugin info like name, version, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPluginCapabilities(self, request, context):
        """Retrieves the plugin's capabilities (e.g., can handle HTTP, can handle tunnels).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessHttpRequest(self, request, context):
        """Processes an HTTP request, potentially modifying it or aborting.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessHttpResponse(self, request, context):
        """Processes an HTTP response, potentially modifying it or aborting.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessTunnelData(self, request, context):
        """Processes a chunk of data in a tunneled connection (TCP or TLS).
        You can call this repeatedly as data flows from client to server or server to client.
        The plugin can choose to pass through, modify, buffer, or close the connection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=plugin__pb2.HealthCheckRequest.FromString,
                    response_serializer=plugin__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetPluginInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPluginInfo,
                    request_deserializer=plugin__pb2.GetPluginInfoRequest.FromString,
                    response_serializer=plugin__pb2.GetPluginInfoResponse.SerializeToString,
            ),
            'GetPluginCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPluginCapabilities,
                    request_deserializer=plugin__pb2.GetPluginCapabilitiesRequest.FromString,
                    response_serializer=plugin__pb2.GetPluginCapabilitiesResponse.SerializeToString,
            ),
            'ProcessHttpRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessHttpRequest,
                    request_deserializer=plugin__pb2.ProcessHttpRequestRequest.FromString,
                    response_serializer=plugin__pb2.ProcessHttpRequestResponse.SerializeToString,
            ),
            'ProcessHttpResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessHttpResponse,
                    request_deserializer=plugin__pb2.ProcessHttpResponseRequest.FromString,
                    response_serializer=plugin__pb2.ProcessHttpResponseResponse.SerializeToString,
            ),
            'ProcessTunnelData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessTunnelData,
                    request_deserializer=plugin__pb2.ProcessTunnelDataRequest.FromString,
                    response_serializer=plugin__pb2.ProcessTunnelDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.PluginService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('plugin.PluginService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PluginService(object):
    """Main service that plugin providers implement.
    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/HealthCheck',
            plugin__pb2.HealthCheckRequest.SerializeToString,
            plugin__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPluginInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/GetPluginInfo',
            plugin__pb2.GetPluginInfoRequest.SerializeToString,
            plugin__pb2.GetPluginInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPluginCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/GetPluginCapabilities',
            plugin__pb2.GetPluginCapabilitiesRequest.SerializeToString,
            plugin__pb2.GetPluginCapabilitiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessHttpRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/ProcessHttpRequest',
            plugin__pb2.ProcessHttpRequestRequest.SerializeToString,
            plugin__pb2.ProcessHttpRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessHttpResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/ProcessHttpResponse',
            plugin__pb2.ProcessHttpResponseRequest.SerializeToString,
            plugin__pb2.ProcessHttpResponseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessTunnelData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/ProcessTunnelData',
            plugin__pb2.ProcessTunnelDataRequest.SerializeToString,
            plugin__pb2.ProcessTunnelDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
