---
import BaseLayout from "@/layouts/BaseLayout.astro";
import PageTitle from "@/components/_ui/PageTitle.astro";
import EventCard from "@/components/events/EventCard.astro";

const events: any[] = await Astro.glob("./events/*.md");

let next: any | null = null;
let upcoming: any[] = [];
let passed: any[] = [];

let sortEvents = (events: any[]) => {
  const today: Date = new Date(Date.now());
  events.forEach((e: any) => {
    const eventDate = new Date(e.frontmatter.date);
    if (eventDate > today) {
      upcoming.push(e);
    } else {
      passed.push(e);
    }
  });
};

sortEvents(events);
upcoming.sort(
  (a, b) =>
    new Date(a.frontmatter.date).getTime() -
    new Date(b.frontmatter.date).getTime()
);
passed.sort(
  (a, b) =>
    new Date(b.frontmatter.date).getTime() -
    new Date(a.frontmatter.date).getTime()
);

if (upcoming.length > 0) {
  next = upcoming.shift();
}

const currentYear = new Date().getFullYear().toString();
const title = `SRE Events & Meetups ${currentYear}`;
const description = `Join our SRE events & meetups for ${currentYear}. Learn from engineers who are building more reliable systems and SRE culture within their teams. Join a free SRE event.`;
---

<BaseLayout {title} {description}>
  <div class="container">
    <PageTitle center={true}>Events</PageTitle>

    {next !== null && <EventCard event={next} hero={true} />}

    {upcoming.length > 0 && (
      <section class="events">
        <h2>
          <span class="highlighted">Upcoming events</span>
        </h2>
        <ul class="list-reset">
          {upcoming.map((event) => (
            <li>
              <EventCard event={event} />
            </li>
          ))}
        </ul>
      </section>
    )}

    <section class="events">
      <h2><span class="highlighted">Past events</span></h2>
      <ul class="list-reset">
        {passed.map((event) => (
          <li>
            <EventCard event={event} />
          </li>
        ))}
      </ul>
    </section>
  </div>
</BaseLayout>

<script lang="ts">
  const cards = document.querySelectorAll(".eventCard");
  Array.prototype.forEach.call(cards, (card) => {
    let down,
      up,
      link = card.querySelector("h3 a");
    card.onmousedown = () => (down = +new Date());
    card.onmouseup = () => {
      up = +new Date();
      if (up - down < 200) {
        link.click();
      }
    };
  });
</script>

<style lang="scss">
  .events {
    padding-top: var(--space-large);
    padding-bottom: var(--space-large);

    h2 {
      text-align: center;
    }

    ul {
      display: grid;
      grid-template-columns: 1fr;
      gap: var(--space-medium);

      @media (min-width: 50rem) {
        grid-template-columns: repeat(2, 1fr);
      }

      @media (min-width: 90rem) {
        grid-template-columns: repeat(3, 1fr);
      }
    }
  }
</style>
