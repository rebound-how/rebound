"""init

Revision ID: c9a5def34d2a
Revises:
Create Date: 2025-01-24 11:37:23.324163

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from reliably_app import environment

# revision identifiers, used by Alembic.
revision = "c9a5def34d2a"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "agents",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column("from_user_id", postgresql.UUID(), nullable=True),
        sa.Column("token_id", postgresql.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("internal", sa.Boolean(), nullable=True),
        sa.Column(
            "state", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_agents")),
        sa.UniqueConstraint("name", "org_id", name=op.f("uq_agents_name")),
        sa.UniqueConstraint(
            "token_id", "org_id", name=op.f("uq_agents_token_id")
        ),
        sa.UniqueConstraint(
            "user_id", "org_id", name=op.f("uq_agents_user_id")
        ),
    )
    with op.batch_alter_table("agents", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_agents_from_user_id"), ["from_user_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_agents_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_agents_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            "ix_agents_state", ["state"], unique=False, postgresql_using="gin"
        )
        batch_op.create_index(
            batch_op.f("ix_agents_token_id"), ["token_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_agents_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "assitant_scenario",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column("experiment_id", postgresql.UUID(), nullable=True),
        sa.Column("plan_id", postgresql.UUID(), nullable=True),
        sa.Column("integration_id", postgresql.UUID(), nullable=True),
        sa.Column("completed", sa.Boolean(), nullable=False),
        sa.Column(
            "query", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "suggestion", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "meta", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_assitant_scenario")),
    )
    with op.batch_alter_table("assitant_scenario", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_assitant_scenario_experiment_id"),
            ["experiment_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_assitant_scenario_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_assitant_scenario_integration_id"),
            ["integration_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_assitant_scenario_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_assitant_scenario_plan_id"),
            ["plan_id"],
            unique=False,
        )
        batch_op.create_index(
            "ix_assitant_scenario_query",
            ["query"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            "ix_assitant_scenario_suggestion",
            ["suggestion"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_assitant_scenario_user_id"),
            ["user_id"],
            unique=False,
        )

    op.create_table(
        "auth_flow",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "active",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=True,
        ),
        sa.Column("provider", sa.String(), nullable=False),
        sa.Column("nonce", sa.String(), nullable=False),
        sa.Column(
            "state", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_auth_flow")),
    )
    with op.batch_alter_table("auth_flow", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_auth_flow_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_auth_flow_nonce"), ["nonce"], unique=True
        )
        batch_op.create_index(
            batch_op.f("ix_auth_flow_provider"), ["provider"], unique=False
        )

    op.create_table(
        "catalogs",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=True),
        sa.Column(
            "manifest", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_catalogs")),
    )
    with op.batch_alter_table("catalogs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catalogs_id"), ["id"], unique=False
        )
        batch_op.create_index(
            "ix_catalogs_manifest",
            ["manifest"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_catalogs_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_catalogs_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "deployments",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column(
            "definition",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_deployments")),
        sa.UniqueConstraint("name", "org_id", name=op.f("uq_deployments_name")),
    )
    with op.batch_alter_table("deployments", schema=None) as batch_op:
        batch_op.create_index(
            "ix_deployments_definition",
            ["definition"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_deployments_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_deployments_name"), ["name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_deployments_org_id"), ["org_id"], unique=False
        )

    op.create_table(
        "environments",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("used_for", sa.String(), nullable=False),
        sa.Column(
            "envvars", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "secrets",
            environment.models.EnvironmentSecretType(),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_environments")),
    )
    with op.batch_alter_table("environments", schema=None) as batch_op:
        batch_op.create_index(
            "ix_environments_definition",
            ["envvars"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_environments_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_environments_name"), ["name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_environments_org_id"), ["org_id"], unique=False
        )

    op.create_table(
        "executions",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("experiment_id", postgresql.UUID(), nullable=False),
        sa.Column("plan_id", postgresql.UUID(), nullable=True),
        sa.Column("user_id", postgresql.UUID(), nullable=True),
        sa.Column(
            "user_state", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "result", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("log", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_executions")),
    )
    with op.batch_alter_table("executions", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_executions_experiment_id"),
            ["experiment_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_executions_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_executions_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_executions_plan_id"), ["plan_id"], unique=False
        )
        batch_op.create_index(
            "ix_executions_result",
            ["result"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_executions_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "experiments",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("template_id", postgresql.UUID(), nullable=True),
        sa.Column("executions_count", sa.Integer(), nullable=True),
        sa.Column(
            "definition",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experiments")),
    )
    with op.batch_alter_table("experiments", schema=None) as batch_op:
        batch_op.create_index(
            "ix_experiments_definition",
            ["definition"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_experiments_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_experiments_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_experiments_template_id"),
            ["template_id"],
            unique=False,
        )

    op.create_table(
        "integrations",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("environment_id", postgresql.UUID(), nullable=False),
        sa.Column("provider", sa.String(), nullable=False),
        sa.Column("vendor", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_integrations")),
        sa.UniqueConstraint(
            "environment_id",
            "org_id",
            name=op.f("uq_integrations_environment_id"),
        ),
        sa.UniqueConstraint(
            "name", "org_id", name=op.f("uq_integrations_name")
        ),
    )
    with op.batch_alter_table("integrations", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_integrations_environment_id"),
            ["environment_id"],
            unique=True,
        )
        batch_op.create_index(
            batch_op.f("ix_integrations_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_integrations_name"), ["name"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_integrations_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_integrations_provider"), ["provider"], unique=False
        )

    op.create_table(
        "jobs",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("next_run_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=True),
        sa.Column("claimed", sa.Boolean(), nullable=False),
        sa.Column("suspended", sa.Boolean(), nullable=True),
        sa.Column("errored", sa.Boolean(), nullable=True),
        sa.Column("pattern", sa.String(), nullable=False),
        sa.Column("timezone", sa.String(), nullable=True),
        sa.Column("error_message", sa.String(), nullable=True),
        sa.Column(
            "definition",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_jobs")),
    )
    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_jobs_claimed"), ["claimed"], unique=False
        )
        batch_op.create_index(
            "ix_jobs_definition",
            ["definition"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(batch_op.f("ix_jobs_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_jobs_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_jobs_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "organization",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("reset_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "experiments_count",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "executions_count",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "running_executions_count",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "plans_count",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "users_count",
            sa.Integer(),
            server_default=sa.text("1"),
            nullable=False,
        ),
        sa.Column(
            "consumed_minutes",
            sa.Integer(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "pending",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "blocked",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "deleted",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column("service_account", sa.String(), nullable=True),
        sa.Column("role", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organization")),
    )
    with op.batch_alter_table("organization", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_organization_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_organization_name"), ["name"], unique=True
        )

    op.create_table(
        "organization_invitations",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "active",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=True,
        ),
        sa.Column("link_hash", postgresql.BYTEA(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organization_invitations")),
    )
    with op.batch_alter_table(
        "organization_invitations", schema=None
    ) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_organization_invitations_active"),
            ["active"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_organization_invitations_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_organization_invitations_org_id"),
            ["org_id"],
            unique=False,
        )

    op.create_table(
        "organization_users",
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=False, cycle=True),
            nullable=False,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column(
            "owner",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "agent",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organization_users")),
        sa.UniqueConstraint(
            "org_id", "user_id", name=op.f("uq_organization_users_org_id")
        ),
    )
    with op.batch_alter_table("organization_users", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_organization_users_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_organization_users_user_id"),
            ["user_id"],
            unique=False,
        )

    op.create_table(
        "plans",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("ref", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("executions_count", sa.Integer(), nullable=True),
        sa.Column("error", sa.String(), nullable=True),
        sa.Column(
            "definition",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "last_executions_info",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_plans")),
    )
    with op.batch_alter_table("plans", schema=None) as batch_op:
        batch_op.create_index(
            "ix_plans_definition",
            ["definition"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(batch_op.f("ix_plans_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_plans_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_plans_ref"), ["ref"], unique=True)
        batch_op.create_index(
            batch_op.f("ix_plans_status"), ["status"], unique=False
        )

    op.create_table(
        "schedulables",
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=False, cycle=True),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("scheduled_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("plan_id", postgresql.UUID(), nullable=False),
        sa.Column("agent_id", postgresql.UUID(), nullable=True),
        sa.Column("deployment_type", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_schedulables")),
        sa.UniqueConstraint(
            "org_id", "plan_id", name=op.f("uq_schedulables_org_id")
        ),
    )
    with op.batch_alter_table("schedulables", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_schedulables_agent_id"), ["agent_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_schedulables_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_schedulables_plan_id"), ["plan_id"], unique=False
        )

    op.create_table(
        "series",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("kind", sa.String(), nullable=False),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("experiment_id", postgresql.UUID(), nullable=True),
        sa.Column("execution_id", postgresql.UUID(), nullable=True),
        sa.Column("plan_id", postgresql.UUID(), nullable=True),
        sa.Column(
            "data", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_series")),
    )
    with op.batch_alter_table("series", schema=None) as batch_op:
        batch_op.create_index(
            "ix_series_data", ["data"], unique=False, postgresql_using="gin"
        )
        batch_op.create_index(
            batch_op.f("ix_series_execution_id"), ["execution_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_series_experiment_id"),
            ["experiment_id"],
            unique=False,
        )
        batch_op.create_index(batch_op.f("ix_series_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_series_kind"), ["kind"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_series_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_series_plan_id"), ["plan_id"], unique=False
        )

    op.create_table(
        "snapshots",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column("agent_id", postgresql.UUID(), nullable=True),
        sa.Column(
            "snapshot", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_snapshots")),
    )
    with op.batch_alter_table("snapshots", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_snapshots_agent_id"), ["agent_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_snapshots_id"), ["id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_snapshots_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            "ix_snapshots_snapshot",
            ["snapshot"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_snapshots_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "tokens",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("org_id", postgresql.UUID(), nullable=False),
        sa.Column("user_id", postgresql.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("revoked", sa.Boolean(), nullable=False),
        sa.Column("token", sa.LargeBinary(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tokens")),
        sa.UniqueConstraint(
            "org_id", "user_id", "name", name=op.f("uq_tokens_org_id")
        ),
    )
    with op.batch_alter_table("tokens", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_tokens_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_tokens_org_id"), ["org_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_tokens_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "users",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("as_agent", sa.Boolean(), nullable=True),
        sa.Column(
            "openid_profile",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column("password", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_users_email"), ["email"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_users_id"), ["id"], unique=False)
        batch_op.create_index(
            "ix_users_openid_profile",
            ["openid_profile"],
            unique=False,
            postgresql_using="gin",
        )
        batch_op.create_index(
            batch_op.f("ix_users_username"), ["username"], unique=True
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_username"))
        batch_op.drop_index("ix_users_openid_profile", postgresql_using="gin")
        batch_op.drop_index(batch_op.f("ix_users_id"))
        batch_op.drop_index(batch_op.f("ix_users_email"))

    op.drop_table("users")
    with op.batch_alter_table("tokens", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_tokens_user_id"))
        batch_op.drop_index(batch_op.f("ix_tokens_org_id"))
        batch_op.drop_index(batch_op.f("ix_tokens_id"))

    op.drop_table("tokens")
    with op.batch_alter_table("snapshots", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_snapshots_user_id"))
        batch_op.drop_index("ix_snapshots_snapshot", postgresql_using="gin")
        batch_op.drop_index(batch_op.f("ix_snapshots_org_id"))
        batch_op.drop_index(batch_op.f("ix_snapshots_id"))
        batch_op.drop_index(batch_op.f("ix_snapshots_agent_id"))

    op.drop_table("snapshots")
    with op.batch_alter_table("series", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_series_plan_id"))
        batch_op.drop_index(batch_op.f("ix_series_org_id"))
        batch_op.drop_index(batch_op.f("ix_series_kind"))
        batch_op.drop_index(batch_op.f("ix_series_id"))
        batch_op.drop_index(batch_op.f("ix_series_experiment_id"))
        batch_op.drop_index(batch_op.f("ix_series_execution_id"))
        batch_op.drop_index("ix_series_data", postgresql_using="gin")

    op.drop_table("series")
    with op.batch_alter_table("schedulables", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_schedulables_plan_id"))
        batch_op.drop_index(batch_op.f("ix_schedulables_org_id"))
        batch_op.drop_index(batch_op.f("ix_schedulables_agent_id"))

    op.drop_table("schedulables")
    with op.batch_alter_table("plans", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_plans_status"))
        batch_op.drop_index(batch_op.f("ix_plans_ref"))
        batch_op.drop_index(batch_op.f("ix_plans_org_id"))
        batch_op.drop_index(batch_op.f("ix_plans_id"))
        batch_op.drop_index("ix_plans_definition", postgresql_using="gin")

    op.drop_table("plans")
    with op.batch_alter_table("organization_users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_organization_users_user_id"))
        batch_op.drop_index(batch_op.f("ix_organization_users_org_id"))

    op.drop_table("organization_users")
    with op.batch_alter_table(
        "organization_invitations", schema=None
    ) as batch_op:
        batch_op.drop_index(batch_op.f("ix_organization_invitations_org_id"))
        batch_op.drop_index(batch_op.f("ix_organization_invitations_id"))
        batch_op.drop_index(batch_op.f("ix_organization_invitations_active"))

    op.drop_table("organization_invitations")
    with op.batch_alter_table("organization", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_organization_name"))
        batch_op.drop_index(batch_op.f("ix_organization_id"))

    op.drop_table("organization")
    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_jobs_user_id"))
        batch_op.drop_index(batch_op.f("ix_jobs_org_id"))
        batch_op.drop_index(batch_op.f("ix_jobs_id"))
        batch_op.drop_index("ix_jobs_definition", postgresql_using="gin")
        batch_op.drop_index(batch_op.f("ix_jobs_claimed"))

    op.drop_table("jobs")
    with op.batch_alter_table("integrations", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_integrations_provider"))
        batch_op.drop_index(batch_op.f("ix_integrations_org_id"))
        batch_op.drop_index(batch_op.f("ix_integrations_name"))
        batch_op.drop_index(batch_op.f("ix_integrations_id"))
        batch_op.drop_index(batch_op.f("ix_integrations_environment_id"))

    op.drop_table("integrations")
    with op.batch_alter_table("experiments", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_experiments_template_id"))
        batch_op.drop_index(batch_op.f("ix_experiments_org_id"))
        batch_op.drop_index(batch_op.f("ix_experiments_id"))
        batch_op.drop_index("ix_experiments_definition", postgresql_using="gin")

    op.drop_table("experiments")
    with op.batch_alter_table("executions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_executions_user_id"))
        batch_op.drop_index("ix_executions_result", postgresql_using="gin")
        batch_op.drop_index(batch_op.f("ix_executions_plan_id"))
        batch_op.drop_index(batch_op.f("ix_executions_org_id"))
        batch_op.drop_index(batch_op.f("ix_executions_id"))
        batch_op.drop_index(batch_op.f("ix_executions_experiment_id"))

    op.drop_table("executions")
    with op.batch_alter_table("environments", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_environments_org_id"))
        batch_op.drop_index(batch_op.f("ix_environments_name"))
        batch_op.drop_index(batch_op.f("ix_environments_id"))
        batch_op.drop_index(
            "ix_environments_definition", postgresql_using="gin"
        )

    op.drop_table("environments")
    with op.batch_alter_table("deployments", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_deployments_org_id"))
        batch_op.drop_index(batch_op.f("ix_deployments_name"))
        batch_op.drop_index(batch_op.f("ix_deployments_id"))
        batch_op.drop_index("ix_deployments_definition", postgresql_using="gin")

    op.drop_table("deployments")
    with op.batch_alter_table("catalogs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catalogs_user_id"))
        batch_op.drop_index(batch_op.f("ix_catalogs_org_id"))
        batch_op.drop_index("ix_catalogs_manifest", postgresql_using="gin")
        batch_op.drop_index(batch_op.f("ix_catalogs_id"))

    op.drop_table("catalogs")
    with op.batch_alter_table("auth_flow", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_auth_flow_provider"))
        batch_op.drop_index(batch_op.f("ix_auth_flow_nonce"))
        batch_op.drop_index(batch_op.f("ix_auth_flow_id"))

    op.drop_table("auth_flow")
    with op.batch_alter_table("assitant_scenario", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_assitant_scenario_user_id"))
        batch_op.drop_index(
            "ix_assitant_scenario_suggestion", postgresql_using="gin"
        )
        batch_op.drop_index(
            "ix_assitant_scenario_query", postgresql_using="gin"
        )
        batch_op.drop_index(batch_op.f("ix_assitant_scenario_plan_id"))
        batch_op.drop_index(batch_op.f("ix_assitant_scenario_org_id"))
        batch_op.drop_index(batch_op.f("ix_assitant_scenario_integration_id"))
        batch_op.drop_index(batch_op.f("ix_assitant_scenario_id"))
        batch_op.drop_index(batch_op.f("ix_assitant_scenario_experiment_id"))

    op.drop_table("assitant_scenario")
    with op.batch_alter_table("agents", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_agents_user_id"))
        batch_op.drop_index(batch_op.f("ix_agents_token_id"))
        batch_op.drop_index("ix_agents_state", postgresql_using="gin")
        batch_op.drop_index(batch_op.f("ix_agents_org_id"))
        batch_op.drop_index(batch_op.f("ix_agents_id"))
        batch_op.drop_index(batch_op.f("ix_agents_from_user_id"))

    op.drop_table("agents")
    # ### end Alembic commands ###
